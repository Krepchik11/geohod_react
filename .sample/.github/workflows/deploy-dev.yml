name: Deploy dev

on:
  workflow_dispatch:

jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Set up JDK 23
        uses: actions/setup-java@v4.7.1
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4.4.2

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Get short commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Build Podman image
        run: |
          podman build \
            -t geohod-backend:dev-${{ steps.vars.outputs.sha_short }} \
            -t geohod-backend:dev-latest \
            -f ./.github/Dockerfile .

      - name: Save Podman image to tarball
        run: |
          podman save -o geohod-backend-dev-${{ steps.vars.outputs.sha_short }}.tar.gz geohod-backend:dev-${{ steps.vars.outputs.sha_short }}

      - name: Render environment file
        run: |
          cat << EOF > geohod-dev.env
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          LOGGING_LEVEL_ROOT=WARN
          LOGGING_LEVEL_ME_GEOHOD=DEBUG
          SPRING_DATASOURCE_URL=jdbc:postgresql://geohod-postgres-dev:5432/${{ secrets.POSTGRES_DB }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          GEOHOD_TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          GEOHOD_TELEGRAM_BOT_USERNAME=${{ secrets.TELEGRAM_BOT_USERNAME }}
          GEOHOD_CREATED_EVENT_LINK_TEMPLATE=${{ vars.GEOHOD_CREATED_EVENT_LINK_TEMPLATE }}
          GEOHOD_REVIEW_LINK_TEMPLATE=${{ vars.GEOHOD_REVIEW_LINK_TEMPLATE }}
          GEOHOD_IMAGE_TAG=dev-${{ steps.vars.outputs.sha_short }}
          CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}
          EOF

      - name: Create deployment artifact archive
        run: |
          mkdir staging
          mv geohod-backend-dev-${{ steps.vars.outputs.sha_short }}.tar.gz staging/
          mv geohod-dev.env staging/
          # This assumes the service file is in deployments/dev/
          cp deployments/dev/* staging/
          tar -czvf geohod-deploy-artifacts-${{ steps.vars.outputs.sha_short }}.tar.gz -C staging .

      - name: Prepare remote server by cleaning up old artifacts
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            # Remove old artifacts and extracted files to ensure a clean slate
            rm -f ~/geohod-backend-dev/geohod-deploy-artifacts-*.tar.gz
            rm -rf ~/geohod-backend-dev/{geohod-backend-dev-*.tar.gz,geohod-dev.env,install.sh,setup.md,geohod-backend-dev.service}
            echo "Old artifacts cleaned up."

      - name: Transfer new artifact to VPS
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "geohod-deploy-artifacts-${{ steps.vars.outputs.sha_short }}.tar.gz"
          target: "~/geohod-backend-dev"

      - name: Execute remote deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            # Unpack the specific archive using its unique name
            tar -xzvf ~/geohod-backend-dev/geohod-deploy-artifacts-${{ steps.vars.outputs.sha_short }}.tar.gz -C ~/geohod-backend-dev/
            # Run the installer script with sudo
            chmod +x /home/${{ secrets.VPS_USER }}/geohod-backend-dev/install.sh
            /home/${{ secrets.VPS_USER }}/geohod-backend-dev/install.sh