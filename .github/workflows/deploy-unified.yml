name: Deploy Frontend (Unified)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
          - both

jobs:
  build:
    name: Build Assets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ fromJSON(format('[ "{0}" ]', github.event.inputs.environment == 'both' && 'development", "production' || github.event.inputs.environment)) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build for ${{ matrix.env }}
        run: npm run build
        env:
          REACT_APP_TELEGRAM_WEBAPP: true
          REACT_APP_API_URL: ${{ matrix.env == 'production' && 'https://app.geohod.ru/api/v1' || 'https://dev.geohod.ru/api/v1' }}
          REACT_APP_BOT_USERNAME: ${{ matrix.env == 'production' && 'geohodton_bot' || 'geohoddev_bot' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.env }}
          path: build/
          retention-days: 1

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download development build
        if: ${{ github.event.inputs.environment == 'development' || github.event.inputs.environment == 'both' }}
        uses: actions/download-artifact@v4
        with:
          name: build-development
          path: builds/dev

      - name: Download production build
        if: ${{ github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both' }}
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: builds/prod

      - name: Transfer all assets to VPS
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "builds/dev/,builds/prod/,deployment/unified/*"
          target: "~/frontend-app-unified/dist/dev/,~/frontend-app-unified/dist/prod/,~/frontend-app-unified/"
          strip_components: 2

      - name: Execute remote setup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd ~/frontend-app-unified
            chmod +x install.sh
            chmod +x certbot.sh
            ./install.sh